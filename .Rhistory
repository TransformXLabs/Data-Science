sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
gold_monthly_tbl <- read_rds("data/gold_monthly_tbl.rds")
train_tbl <- gold_monthly_tbl %>% filter_by_time(date, "start", "2010")
test_tbl  <- gold_monthly_tbl %>% filter_by_time(date, "2011", "2011")
recipe_spec <- recipe(~ ., data = train_tbl) %>%
step_mutate(pct_change =  (gold_price - lag(gold_price)) / lag(gold_price)) %>%
step_normalize(contains("pct_change")) %>%
step_meanimpute(pct_change)
recipe_spec_prep <- recipe_spec %>% prep()
recipe_spec_prep
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
train_processed_tbl <- recipe_spec_prep %>% juice()
train_processed_tbl
train_processed_tbl %>%
plot_time_series(date, pct_change)
train_processed_tbl %>% plot_acf_diagnostics(date, pct_change)
write_rds(train_processed_tbl, "data/train_processed_tbl.rds")
# write_rds(train_processed_tbl, "data/train_processed_tbl.rds")
train_processed_tbl <- read_rds("data/train_processed_tbl.rds")
recipe_spec_prep %>% write_rds("data/recipe_spec_prep.rds")
# recipe_spec_prep %>% write_rds("data/recipe_spec_prep.rds")
train_processed_tbl <- read_rds("data/recipe_spec_prep.rds")
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
py$predictions
train_processed_tbl
# write_rds(train_processed_tbl, "data/train_processed_tbl.rds")
train_processed_tbl <- read_rds("data/train_processed_tbl.rds")
# recipe_spec_prep %>% write_rds("data/recipe_spec_prep.rds")
recipe_spec_prep <- read_rds("data/recipe_spec_prep.rds")
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
train_processed_tbl %>%
add_column(pred = c(rep(NA, 12), py$predictions)) %>%
ggplot(aes(pred, pct_change)) +
geom_abline(slope = 1) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
new_data <- train_processed_tbl %>%
future_frame(.length_out = 12) %>%
bind_rows(train_processed_tbl, .) %>%
replace_na(replace = list(pct_change = 0))
new_data %>% tail(14)
forecast_tbl <- recipe_spec_prep %>%
bake(new_data = gold_monthly_tbl) %>%
# Change this based on time-window being investigated
filter_by_time(date, "start", "2011") %>%
mutate(split = ifelse(date %in% train_tbl$date, "Training", "Test")) %>%
add_column(predictions = c(rep(NA, 12), py$predictions_new))
forecast_tbl
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
scale_color_tq() +
theme_tq()
recipe_spec_prep %>% tidy()
recipe_spec_prep %>% tidy(2)
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
forecast_tbl %>%
mutate(split = factor(split, levels = c("Training", "Test"))) %>%
ggplot(aes(predictions, pct_change, color = split)) +
geom_point(alpha = 0.8) +
geom_abline(slope = 1) +
scale_color_tq() +
theme_tq()
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na() %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
forecast_tbl
forecast_tbl %>%
filter(split == "Test")
forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions))
standardization_tbl <- recipe_spec_prep %>% tidy(2)
mean <- standardization_tbl %>% filter(statistic == "mean") %>% pull(value)
sd   <- standardization_tbl %>% filter(statistic == "sd") %>% pull(value)
gold_price_start <- forecast_tbl %>%
filter(split == "Training") %>%
slice(n()) %>%
pull(gold_price)
forecast_prepared_tbl <- forecast_tbl %>%
filter(split == "Test") %>%
mutate(predictions     = standardize_inv_vec(predictions, mean = mean, sd = sd)) %>%
mutate(gold_prediction = gold_price_start * cumprod(1 + predictions)) %>%
# Smoothed predictions
# mutate(gold_prediction_smoothed = slidify_vec(
#     .x = gold_prediction, .f = base::mean, .period = 3, .align = "center", .partial = TRUE
#     )
# ) %>%
bind_rows(forecast_tbl %>% filter(split == "Training")) %>%
select(date, gold_price, gold_prediction, split) %>%
pivot_longer(cols = c(gold_price, gold_prediction)) %>%
arrange(date, split, name) %>%
drop_na()
forecast_prepared_tbl %>%
plot_time_series(date, value, .color_var = name, .smooth = F, .plotly_slider = T)
forecast_prepared_tbl
forecast_prepared_tbl %>%
filter(split != "Training")
forecast_prepared_tbl %>%
filter(split == "Test") %>%
pivot_wider(names_from = name, values_from = value)
# Accuracy
library(yardstick)
forecast_prepared_tbl %>%
filter(split == "Test") %>%
pivot_wider(names_from = name, values_from = value) %>%
summarize(
mae  = mae_vec(gold_price, gold_prediction),
rmse = rmse_vec(gold_price, gold_prediction)
)
forecast_prepared_tbl %>%
filter(split == "Test") %>%
pivot_wider(names_from = name, values_from = value) %>%
summarize(
mae  = mae_vec(gold_price, gold_prediction),
rmse = rmse_vec(gold_price, gold_prediction),
mape = mape_vec(gold_price, gold_prediction)
)
forecast_prepared_tbl %>%
filter(split == "Test") %>%
pivot_wider(names_from = name, values_from = value) %>%
group_by(split) %>%
summarize(
mae  = mae_vec(gold_price, gold_prediction),
rmse = rmse_vec(gold_price, gold_prediction),
mape = mape_vec(gold_price, gold_prediction),
)
forecast_prepared_tbl %>%
filter(split == "Test") %>%
pivot_wider(names_from = name, values_from = value) %>%
group_by(split) %>%
summarize(
mae  = mae_vec(gold_price, gold_prediction),
rmse = rmse_vec(gold_price, gold_prediction),
mape = mape_vec(gold_price, gold_prediction),
smape = smape_vec(gold_price, gold_prediction)
)
shiny::runApp()
repl_python()
shiny::runApp()
runApp()
runApp('D:/Firas/Apps/lab_55_workflowsets')
runApp('D:/Firas/Apps/lab_55_workflowsets')
runApp('D:/Firas/Apps/lab_55_workflowsets')
runApp('D:/Firas/Apps/lab_55_workflowsets')
runApp('D:/Firas/Apps/lab_33_python_HR')
