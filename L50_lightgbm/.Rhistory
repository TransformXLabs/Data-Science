keep_data   = TRUE
) %>%
filter(item_id %in% item_id_sample) %>%
group_by(item_id) %>%
plot_modeltime_forecast(
.facet_ncol         = 4,
.conf_interval_show = FALSE,
.interactive        = TRUE
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(item_id %in% item_id_sample) %>%
group_by(item_id) %>%
plot_modeltime_forecast(
.facet_ncol         = 2,
.conf_interval_show = FALSE,
.interactive        = TRUE
)
# * Visualize ----
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(item_id %in% item_id_sample) %>%
group_by(item_id) %>%
filter_by_time(
.start_date = last(date) %-time% "3 month",
.end_date = "end"
) %>%
plot_modeltime_forecast(
.facet_ncol         = 2,
.conf_interval_show = FALSE,
.interactive        = TRUE
)
# * Visualize ----
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(item_id %in% item_id_sample) %>%
group_by(item_id) %>%
filter_by_time(
.start_date = last(date) %-time% "3 month",
.end_date = "end"
) %>%
plot_modeltime_forecast(
.facet_ncol         = 2,
.conf_interval_show = TRUE,
.interactive        = TRUE
)
library(modeltime.ensemble)
calibration_tbl
calibration_tbl %>%
filter(.model_id %in% c(2, 5))
# * Calibrate on Test ----
calibration_tbl <- modeltime_table(
wflw_lightgbm_defaults,
wflw_xgboost_defaults,
wflw_catboost_defaults,
wflw_lightgbm_tweedie,
wflw_xgboost_tweedie,
wflw_catboost_tweedie
) %>%
modeltime_calibrate(testing(splits)) %>%
mutate(.model_desc = ifelse(.model_id > 3, str_c(.model_desc, " - Tweedie"), .model_desc))
calibration_tbl %>% modeltime_accuracy()
# * Visualize ----
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(item_id %in% item_id_sample) %>%
group_by(item_id) %>%
filter_by_time(
.start_date = last(date) %-time% "3 month",
.end_date = "end"
) %>%
plot_modeltime_forecast(
.facet_ncol         = 2,
.conf_interval_show = TRUE,
.interactive        = TRUE
)
calibration_tbl %>%
filter(.model_id %in% c(2, 5)) %>%
ensemble_weighted(loadings = c(2, 3))
calibration_tbl %>%
filter(.model_id %in% c(2, 5)) %>%
ensemble_weighted(loadings = c(2, 3)) %>%
modeltime_table()
ensemble_tbl <- calibration_tbl %>%
filter(.model_id %in% c(2, 5)) %>%
ensemble_weighted(loadings = c(2, 3)) %>%
modeltime_table()
ensemble_refit_tbl <- ensemble_tbl %>%
modeltime_refit(data_prepared_tbl)
ensemble_refit_tbl %>%
modeltime_forecast(
new_data    = future_data_tbl,
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(item_id %in% item_id_sample) %>%
group_by(item_id) %>%
# Focus on end of series
filter_by_time(
.start_date = last(date) %-time% "3 month",
.end_date = "end"
) %>%
plot_modeltime_forecast(
.facet_ncol         = 2,
.conf_interval_show = TRUE,
.interactive        = TRUE
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(!is.na(.model_id))
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(!is.na(.model_id)) %>%
select(.model_desc, .key, .index, .value)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(!is.na(.model_id)) %>%
select(.model_desc, .key, .index, .value) %>%
pivot_wider(
names_from   = .key,
values_from  = .index
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(!is.na(.model_id)) %>%
select(.model_desc, .key, .index, .value) %>%
pivot_wider(
names_from   = .key,
values_from  = .value
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
filter(!is.na(.model_id)) %>%
select(item_id, .model_desc, .key, .index, .value) %>%
pivot_wider(
names_from   = .key,
values_from  = .value
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .key, .index, .value) %>%
pivot_wider(
names_from   = .key,
values_from  = .value
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .key, .index, .value)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .index, .value) %>%
pivot_wider(
names_from   = .model_desc,
values_from  = .value
)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .index, .value) %>%
pivot_wider(
names_from   = .model_desc,
values_from  = .value
) %>%
filter(!is.na(LIGHTGBM))
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .index, .value) %>%
pivot_wider(
names_from   = .model_desc,
values_from  = .value
) %>%
filter(!is.na(LIGHTGBM)) %>%
pivot_longer(cols = LIGHTGBM:`CATBOOST - Tweedie`)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .index, .value) %>%
pivot_wider(
names_from   = .model_desc,
values_from  = .value
) %>%
filter(!is.na(LIGHTGBM)) %>%
pivot_longer(cols = LIGHTGBM:`CATBOOST - Tweedie`) %>%
group_by(item_id, name) %>%
summarize_accuracy_metrics(truth = ACTUAL, estimate = value)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .index, .value) %>%
pivot_wider(
names_from   = .model_desc,
values_from  = .value
) %>%
filter(!is.na(LIGHTGBM)) %>%
pivot_longer(cols = LIGHTGBM:`CATBOOST - Tweedie`) %>%
group_by(item_id, name) %>%
summarize_accuracy_metrics(
truth      = ACTUAL,
estimate   = value,
metric_set = default_forecast_accuracy_metric_set()
)
accuracy_by_item_tbl <- calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = data_prepared_tbl,
keep_data   = TRUE
) %>%
select(item_id, .model_desc, .index, .value) %>%
pivot_wider(
names_from   = .model_desc,
values_from  = .value
) %>%
filter(!is.na(LIGHTGBM)) %>%
pivot_longer(cols = LIGHTGBM:`CATBOOST - Tweedie`) %>%
group_by(item_id, name) %>%
summarize_accuracy_metrics(
truth      = ACTUAL,
estimate   = value,
metric_set = default_forecast_accuracy_metric_set()
)
accuracy_by_item_tbl
accuracy_by_item_tbl %>%
group_by(item_id) %>%
slice_min(mae)
accuracy_by_item_tbl %>%
group_by(item_id) %>%
slice_min(mae) %>%
View()
calibration_tbl
accuracy_by_item_tbl %>%
group_by(item_id) %>%
slice_min(rmse) %>%
View()
accuracy_by_item_tbl %>%
group_by(item_id) %>%
slice_min(rmse)
install.packages("ragg")
install.packages("collapsibleTree")
read_rds("m5-forecasting-accuracy/sales_sample_tbl.rds")
sales_sample_tbl <- read_rds("m5-forecasting-accuracy/sales_sample_tbl.rds")
sales_sample_tbl
full_data_tbl <- read_rds("m5-forecasting-accuracy/full_data_tbl.rds")
full_data_tbl
full_data_tbl %>%
group_by(item_id, dept_id, cat_id, store_id, state_id) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup()
purchases_summarized_tbl <- full_data_tbl %>%
group_by(item_id, dept_id, cat_id, store_id, state_id) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup()
purchases_summarized_tbl
library(shiny)
library(collapsibleTree)
library(tidyverse)
library(timetk)
purchases_summarized_tbl <- full_data_tbl %>%
group_by(item_id, dept_id, cat_id, store_id, state_id) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup()
reticulate::repl_python()
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE
)
# IMPORTANT NOTE!!!
# INSTALL DEVELOPMENT VERSION OF RMARKDOWN AND CROSSTALK
# rmarkdown   * 2.6.6   2021-02-02 [1] Github (rstudio/rmarkdown@d8e7a15)
# Run These:
# remotes::install_github("rstudio/rmarkdown")
# remotes::install_github("rstudio/crosstalk")
library(shiny)
library(collapsibleTree)
library(modeltime)
library(modeltime.ensemble)
library(tidymodels)
library(tidyverse)
library(timetk)
hierarchy_tbl <- read_rds("m5-forecasting-accuracy/sales_sample_tbl.rds") %>%
select(contains("id"))
full_data_tbl    <- read_rds("m5-forecasting-accuracy/full_data_tbl.rds")
future_forecast_ensemble_tbl <- read_rds("m5-forecasting-accuracy/future_forecast_ensemble_tbl.rds")
purchases_summarized_tbl <- full_data_tbl %>%
select(category, identifier, value) %>%
group_by(category, identifier) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup() %>%
filter(category == 'item_id') %>%
left_join(hierarchy_tbl, by = c("identifier" = "item_id")) %>%
select(-id)
indicator_options <- full_data_tbl %>%
distinct(category, identifier) %>%
arrange(category, identifier) %>%
pull(identifier)
indicator_options
full_data_tbl %>%
distinct(category, identifier)
indicator_options <- full_data_tbl %>%
distinct(category, identifier) %>%
mutate(category = factor(
category,
levels = c("all_stores_id", "state_id", "store_id",
"cat_id", "dept_id", "item_id"))
) %>%
arrange(category, identifier) %>%
pull(identifier)
indicator_options
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE
)
# IMPORTANT NOTE!!!
# INSTALL DEVELOPMENT VERSION OF RMARKDOWN AND CROSSTALK
# rmarkdown   * 2.6.6   2021-02-02 [1] Github (rstudio/rmarkdown@d8e7a15)
# Run These:
# remotes::install_github("rstudio/rmarkdown")
# remotes::install_github("rstudio/crosstalk")
library(shiny)
library(collapsibleTree)
library(plotly)
library(modeltime)
library(modeltime.ensemble)
library(tidymodels)
library(tidyverse)
library(timetk)
hierarchy_tbl <- read_rds("m5-forecasting-accuracy/sales_sample_tbl.rds") %>%
select(contains("id"))
full_data_tbl    <- read_rds("m5-forecasting-accuracy/full_data_tbl.rds")
future_forecast_ensemble_tbl <- read_rds("m5-forecasting-accuracy/future_forecast_ensemble_tbl.rds")
purchases_summarized_tbl <- full_data_tbl %>%
select(category, identifier, value) %>%
group_by(category, identifier) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup() %>%
filter(category == 'item_id') %>%
left_join(hierarchy_tbl, by = c("identifier" = "item_id")) %>%
select(-id)
indicator_options <- full_data_tbl %>%
distinct(category, identifier) %>%
mutate(category = factor(
category,
levels = c("all_stores_id", "state_id", "store_id",
"cat_id", "dept_id", "item_id"))
) %>%
arrange(category, identifier) %>%
pull(identifier)
hierarchy_tbl <- read_rds("m5-forecasting-accuracy/sales_sample_tbl.rds") %>%
select(contains("id"))
full_data_tbl    <- read_rds("m5-forecasting-accuracy/full_data_tbl.rds")
test_forecast_ensemble_tbl <- read_rds("m5-forecasting-accuracy/test_forecast_ensemble_tbl.rds")
future_forecast_ensemble_tbl <- read_rds("m5-forecasting-accuracy/future_forecast_ensemble_tbl.rds")
purchases_summarized_tbl <- full_data_tbl %>%
select(category, identifier, value) %>%
group_by(category, identifier) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup() %>%
filter(category == 'item_id') %>%
left_join(hierarchy_tbl, by = c("identifier" = "item_id")) %>%
select(-id)
indicator_options <- full_data_tbl %>%
distinct(category, identifier) %>%
mutate(category = factor(
category,
levels = c("all_stores_id", "state_id", "store_id",
"cat_id", "dept_id", "item_id"))
) %>%
arrange(category, identifier) %>%
pull(identifier)
purchases_summarized_tbl
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE
)
# IMPORTANT NOTE!!!
# INSTALL DEVELOPMENT VERSION OF RMARKDOWN AND CROSSTALK
# rmarkdown   * 2.6.6   2021-02-02 [1] Github (rstudio/rmarkdown@d8e7a15)
# Run These:
# remotes::install_github("rstudio/rmarkdown")
# remotes::install_github("rstudio/crosstalk")
library(shiny)
library(collapsibleTree)
library(plotly)
library(modeltime)
library(modeltime.ensemble)
library(tidymodels)
library(tidyverse)
library(timetk)
hierarchy_tbl <- read_rds("m5-forecasting-accuracy/sales_sample_tbl.rds") %>%
select(contains("id"))
full_data_tbl    <- read_rds("m5-forecasting-accuracy/full_data_tbl.rds")
test_forecast_ensemble_tbl <- read_rds("m5-forecasting-accuracy/test_forecast_ensemble_tbl.rds")
future_forecast_ensemble_tbl <- read_rds("m5-forecasting-accuracy/future_forecast_ensemble_tbl.rds")
purchases_summarized_tbl <- full_data_tbl %>%
select(category, identifier, value) %>%
group_by(category, identifier) %>%
summarise(value = sum(value, na.rm = T)) %>%
ungroup() %>%
filter(category == 'item_id') %>%
left_join(hierarchy_tbl, by = c("identifier" = "item_id")) %>%
select(-id)
indicator_options <- full_data_tbl %>%
distinct(category, identifier) %>%
mutate(category = factor(
category,
levels = c("all_stores_id", "state_id", "store_id",
"cat_id", "dept_id", "item_id"))
) %>%
arrange(category, identifier) %>%
pull(identifier)
purchases_summarized_tbl %>%
collapsibleTree(
hierarchy = c("state_id", "store_id", "cat_id", "dept_id", "identifier"),
attribute = "value",
root      = "All Stores",
aggFun    = sum,
nodeSize  = "value",
tooltip   = TRUE,
fontSize  = 16
)
purchases_summarized_tbl
purchases_summarized_tbl %>% distinct(identifier)
reticulate::repl_python()
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE
)
# IMPORTANT NOTE!!!
# INSTALL DEVELOPMENT VERSION OF RMARKDOWN AND CROSSTALK
# rmarkdown   * 2.6.6   2021-02-02 [1] Github (rstudio/rmarkdown@d8e7a15)
# Run These:
# remotes::install_github("rstudio/rmarkdown")
# remotes::install_github("rstudio/crosstalk")
library(shiny)
library(collapsibleTree)
library(plotly)
library(DT)
library(modeltime)
library(modeltime.ensemble)
library(tidymodels)
library(tidyverse)
library(timetk)
